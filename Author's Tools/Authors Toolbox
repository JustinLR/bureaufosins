# Import necessary modules
import tkinter as tk
from tkinter import PhotoImage
from tkinter import ttk
from tkinter import Menu
import webbrowser
import turtle
from character_creator_module import setup_character_creator
from book_hub_module import setup_book_hub
from summarizer_module import setup_summarizer

# Function to show the selected tab's content
def show_tab(tab_frame, content_func=None):
    # Hide all tab frames
    for frame in (homepage_frame, character_creator_frame, book_hub_frame, summarizer_frame):
        frame.pack_forget()
    
    # Show the selected tab frame
    tab_frame.pack(fill=tk.BOTH, expand=True)
    
    # Call the function to configure the tab's content if provided
    if content_func:
        content_func(tab_frame)

def summarizer_content(tab_frame):
    # Clear the frame before setting it up again
    for widget in tab_frame.winfo_children():
        widget.destroy()

    setup_summarizer(tab_frame)
        
def character_creator_content(tab_frame):
    # Clear the frame before setting it up again
    for widget in tab_frame.winfo_children():
        widget.destroy()

    # Call the setup_character_creator function to set up the frame again
    setup_character_creator(tab_frame)

def book_hub_content(tab_frame):
    # Clear the book_hub_canvas_frame
    for widget in book_hub_canvas_frame.winfo_children():
        widget.destroy()

    # Call the setup_book_hub function for the book_hub_canvas_frame
    setup_book_hub(book_hub_canvas_frame)

def homepage_content(tab_frame):
    # Clear the homepage_frame
    for widget in tab_frame.winfo_children():
        widget.destroy()
    
    # Load the background image
    background_image = PhotoImage(file=r"C:\Users\justi\Dropbox\Scrivener\Macros\Instruction Sets\Author's Toolbox\Images\Homepage.png")  # Update path as needed
    
    # Create a label to hold the background image
    background_label = tk.Label(tab_frame, image=background_image)
    background_label.place(x=0, y=0, relwidth=1, relheight=1)
    
    # Keep a reference to the image to prevent garbage collection
    background_label.image = background_image
    
    # Create other content on top of the background
    homepage_label = tk.Label(tab_frame, text="Welcome to the Author's Toolbox!", bg='white')
    homepage_label.pack(pady=20)  # Adjust positioning as needed

def close_application():
    # Close the application
    root.destroy()

def open_website(event):
    webbrowser.open("http://www.bureauofsins.com")

def about():
    # Create a new window for the About information
    about_window = tk.Toplevel(root)
    about_window.title("About")
    about_label = tk.Label(about_window, text="Author's Toolbox - Version 1.0\nÂ© 2024 J. L. Richards")
    about_label.pack(padx=20, pady=10)
    
    # Add your website address as a clickable hyperlink
    website_label = tk.Label(about_window, text="Website: www.bureauofsins.com", fg="blue", cursor="hand2")
    website_label.pack(padx=20, pady=10)
    website_label.bind("<Button-1>", open_website)

# Create the main application window
root = tk.Tk()
root.title("Author's Toolbox")
root.geometry("800x600+300+120")

# Create a Menu Bar
menu_bar = Menu(root)
root.config(menu=menu_bar)

# Create File Menu
file_menu = Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Close", command=close_application)
menu_bar.add_cascade(label="File", menu=file_menu)

# Create Help Menu
help_menu = Menu(menu_bar, tearoff=0)
help_menu.add_command(label="About", command=about)
menu_bar.add_cascade(label="Help", menu=help_menu)

# Create a Frame to hold the Notebook with tabs on the left
frame = ttk.Frame(root)
frame.pack(side=tk.LEFT, fill=tk.Y, expand=False)

# Create custom tab buttons on the left side
# Creating buttons with a specified width
homepage_button = tk.Button(frame, text="Homepage", width=20, height=5, bg='blue', command=lambda: show_tab(homepage_frame, homepage_content))
character_creator_button = tk.Button(frame, text="Character Creator", width=20, height=5, bg='blue', command=lambda: show_tab(character_creator_frame, character_creator_content))
book_hub_button = tk.Button(frame, text="Book Hub", width=20, height=5, bg='blue', command=lambda: show_tab(book_hub_frame, book_hub_content))
summarizer_button = tk.Button(frame, text="Summarizer", width=20, height=5, bg='blue', command=lambda: show_tab(summarizer_frame, summarizer_content))

homepage_button.pack(anchor = 'nw')
character_creator_button.pack(anchor = 'nw')
book_hub_button.pack(anchor = 'nw')
summarizer_button.pack(anchor = 'nw')

# Create frames for the content of each tab
homepage_frame = tk.Frame(root, bg='blue')
character_creator_frame = tk.Frame(root, bg='blue')
book_hub_frame = tk.Frame(root, bg='blue')
summarizer_frame = tk.Frame(root, bg='blue')

# Create a Canvas widget with a scrollbar for each tab
homepage_canvas_frame = tk.Frame(homepage_frame)
homepage_canvas_frame.pack(fill=tk.BOTH, expand=True)

homepage_canvas = tk.Canvas(homepage_canvas_frame, height=200)
homepage_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

homepage_scrollbar = ttk.Scrollbar(homepage_canvas_frame, orient="vertical", command=homepage_canvas.yview)
homepage_scrollbar.pack(side=tk.RIGHT, fill="y")

homepage_canvas.configure(yscrollcommand=homepage_scrollbar.set)

# Configure the canvas to scroll
homepage_canvas.bind("<Configure>", lambda event, canvas=homepage_canvas: canvas.configure(scrollregion=canvas.bbox("all")))

# Create a new frame to be the content of the canvas
homepage_canvas_inner_frame = tk.Frame(homepage_canvas)
homepage_canvas.create_window((0, 0), window=homepage_canvas_inner_frame, anchor="nw")

# Create a Canvas widget for the Character Creator tab (similar to Homepage tab)
character_creator_canvas = tk.Canvas(character_creator_frame, height=200)
character_creator_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

character_creator_scrollbar = ttk.Scrollbar(character_creator_frame, orient="vertical", command=character_creator_canvas.yview)
character_creator_scrollbar.pack(side=tk.RIGHT, fill="y")
character_creator_canvas.configure(yscrollcommand=character_creator_scrollbar.set)
character_creator_canvas_frame = tk.Frame(character_creator_canvas)
character_creator_canvas.create_window((0, 0), window=character_creator_canvas_frame, anchor="nw")

# Create a Canvas widget for the Book Hub tab (similar to Character Creator tab)
book_hub_canvas = tk.Canvas(book_hub_frame, height=200)
book_hub_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

book_hub_scrollbar = ttk.Scrollbar(book_hub_frame, orient="vertical", command=book_hub_canvas.yview)
book_hub_scrollbar.pack(side=tk.RIGHT, fill="y")
book_hub_canvas.configure(yscrollcommand=book_hub_scrollbar.set)
book_hub_canvas_frame = tk.Frame(book_hub_canvas)
book_hub_canvas.create_window((0, 0), window=book_hub_canvas_frame, anchor="nw")

# Configure the canvas to scroll
book_hub_canvas.bind("<Configure>", lambda event, canvas=book_hub_canvas: canvas.configure(scrollregion=canvas.bbox("all")))

# Function to show the selected tab's content
def show_tab(tab_frame, content_func=None):
    # Hide all tab frames
    homepage_frame.pack_forget()
    character_creator_frame.pack_forget()
    book_hub_frame.pack_forget()
    
    # Show the selected tab frame
    tab_frame.pack(fill='both', expand=True)

    # Call the function to configure the tab's content if provided
    if content_func:
        content_func(tab_frame)

# Show the homepage frame first
show_tab(homepage_frame, homepage_content)

# Start the main application loop
root.mainloop()
